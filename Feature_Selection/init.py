import subprocess                   #For calling shell scripts
from optparse import OptionParser   #For making use of flags
import os                           #Iterating through folders
from nltk import ngrams             #For making n grams
from pprint import pprint           #Pretty print
import csv                          #To write output csv file
import random

#==============================================================================================#
parser = OptionParser()		#Options to specify the n-grams, use -h flag for more information
parser.add_option('-n', '--nval', default=2, help='value of n in n-gram', action='store', type='int', dest='nval')

(options, args) = parser.parse_args()

nval = options.nval		#n value in n-grams, default n = 2

print()
print("n value:", nval)
print()

#Running the hexdump script on benign and malware folders
BenignInputFolder = "Benign"
BenignHexdumpsFolder = "Benign_hexdumps"

MalwareInputFolder = "Malware"
MalwareHexdumpsFolder = "Malware_hexdumps"

print("Benign Input Folder:", BenignInputFolder)
print("Benign Hexdumps Folder:", BenignHexdumpsFolder)
print()
print("Malware Input Folder:", MalwareInputFolder)
print("Malware Hexdumps Folder:", MalwareHexdumpsFolder)
print()

print("Calling hexdump script on", BenignInputFolder, "folder")
subprocess.call("bash hexdump.sh " + BenignInputFolder + " " + BenignHexdumpsFolder, shell=True)
print()
print("Calling hexdump script on", MalwareInputFolder, "folder")
subprocess.call("bash hexdump.sh " + MalwareInputFolder + " " + MalwareHexdumpsFolder, shell=True)
print()

#Sets and dictionaries to store various n-grams
totalGrams = 0
dictOfGramsB = dict()
dictOfGramsM = dict()
setOfGrams = set()
fileNames = set()

#Iterating over benign hexdumps
for filename in os.listdir(BenignHexdumpsFolder):
    f = os.path.join(BenignHexdumpsFolder, filename)
    # checking if it is a file
    if not os.path.isfile(f):
        print(f, "not a file")
        continue

    try:
        inputFile = open(f, 'r')
    except OSError:
        print("Could not open/read file:", f)
        continue

    allLines = inputFile.readlines()
    CurrentFile = f.rstrip(".txt")
    CurrentFile = CurrentFile.lstrip(BenignHexdumpsFolder + "/")
    fileNames.add(CurrentFile)
    dictOfGramsB[CurrentFile] = set()

    for line in allLines:
        allNGrams = ngrams(line.rstrip("\n").split(), nval)
        for gram in allNGrams:
            gram = ''.join(gram)
            dictOfGramsB[CurrentFile].add(gram)
            setOfGrams.add(gram)
    print("File:", CurrentFile, "Cumulative N-Grams:", len(setOfGrams))
   
#Iterating over malware hexdumps
for filename in os.listdir(MalwareHexdumpsFolder):
    f = os.path.join(MalwareHexdumpsFolder, filename)
    # checking if it is a file
    if not os.path.isfile(f):
        print(f, "not a file")
        continue

    try:
        inputFile = open(f, 'r')
    except OSError:
        print("Could not open/read file:", f)
        continue

    allLines = inputFile.readlines()
    CurrentFile = f.rstrip(".txt")
    CurrentFile = CurrentFile.lstrip(MalwareHexdumpsFolder + "/")
    fileNames.add(CurrentFile)
    dictOfGramsM[CurrentFile] = set()

    for line in allLines:
        allNGrams = ngrams(line.rstrip("\n").split(), nval)
        for gram in allNGrams:
            gram = ''.join(gram)
            dictOfGramsM[CurrentFile].add(gram)
            setOfGrams.add(gram)
    print("File:", CurrentFile, "Cumulative N-Grams:", len(setOfGrams))
 
#Selecting random 100k n-grams
topN = 100000 
if len(setOfGrams) > topN:
    setOfGrams = set(random.sample(list(setOfGrams), topN))

#Writing the output as a csv file
outFileName = "output.csv"
file = open(outFileName, "w")
writer = csv.writer(file)

listOfGrams = sorted(list(setOfGrams))
writer.writerow(["Files", "Label"] + listOfGrams)

for currentFile, grams in dictOfGramsB.items():
    currentRow = [currentFile, "0"]
    for x in listOfGrams:
        if x in grams:
            currentRow.append("1")
        else:
            currentRow.append("0")
    writer.writerow(currentRow)

for currentFile, grams in dictOfGramsM.items():
    currentRow = [currentFile, "1"]
    for x in listOfGrams:
        if x in grams:
            currentRow.append("1")
        else:
            currentRow.append("0")
    writer.writerow(currentRow)

file.close()
print("\nCSV Writing Done")
